{"version":3,"sources":["webpack:///../src/server.js?22b7","webpack:///external \"cassandra-driver\"?6fd8"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AACA,KAAI,yBAAJ;;AAEA;;;AAGA,KAAM,SAAS,wBAAf;AACA,QAAO,MAAP,CAAc,IAAd,EAAoB,YAAY;AAC9B,UAAQ,GAAR,CAAY,2DAAZ;AACD,EAFD;AAGA,KAAI,YAAY,oBAAQ,EAAR,CAAhB;;AAEA,KAAI,SAAS,IAAI,UAAU,MAAd,CAAqB,EAAE,eAAe,CAAC,WAAD,CAAjB,EAArB,CAAb;AACA,KAAI,UAAU,EAAd;AACA,QAAO,IAAP,CAAY,qCAEZ,aAFY,GAGZ,gBAHY,GAIZ,cAJY,GAKZ,qBALA;AAMA,QAAO,IAAP,CAAY,qCAEZ,aAFY,GAGZ,gBAHY,GAIZ,cAJY,GAKZ,qBALA;;AAQA,qBAAQ,EAAR,EAAuC,MAAvC,EAA+C,MAA/C;AACA;AACA,QAAO,GAAP,CAAW,QAAX,EAAqB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACvC,MAAI,OAAO,EAAX;AACA,OAAK,IAAL,CAAU;AACR,YAAS;AADD,GAAV;AAGA;AACA,aAAW,YAAY;AACrB,OAAI,IAAJ,CAAS,IAAT;AACD,GAFD,EAEG,IAFH;AAID,EAVD;;AAYA,KAAI,SAAS;AACX,cAAY,QAAQ,GAAR,CAAY,QAAZ,KAAyB;AAD1B,EAAb;AAGA,KAAM,WAAW,OAAO,UAAP,GAAqB,QAAQ,GAAR,CAAY,QAAZ,IAAwB,QAAQ,KAAR,EAAe,QAA5D,GAAwE,WAAzF;;AAEA,KAAM,QAAQ,sBAAd;AACA,KAAM,eAAe,MAAM,QAAN,EAArB;AACA,QAAO,GAAP,CAAW,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAClC,0BAAM,EAAC,cAAD,EAAS,UAAU,IAAI,GAAvB,EAAN,EAAmC,UAAC,KAAD,EAAQ,gBAAR,EAA0B,WAA1B,EAA0C;AAC3E,OAAI,gBAAJ,EAAsB;AACpB,QAAI,QAAJ,CAAa,iBAAiB,QAAjB,GAA4B,iBAAiB,MAA1D;AACA;AACD;AACD,OAAI,SAAS,CAAC,WAAd,EAA2B;AACzB;AACA;AACD;AACJ,OAAM,cAAc,iBAAS,cAAT,CACnB;AAAA;AAAA,MAAU,OAAO,KAAjB;AACI,8DAAmB,WAAnB;AADJ,IADmB,CAApB;AAKA,OAAM,YAAY,SAAiB,EAAjB,UAA2B,QAA3B,UAAlB;AACA,OAAI,+LAQsB,WARtB,uEAU6B,KAAK,SAAL,CAAe,YAAf,CAV7B,iDAYa,SAZb,0DAAJ;AAgBG,OAAI,IAAJ,CAAS,MAAT;AACD,GAhCD;AAiCD,EAlCD;;AAoCA,KAAI,IAAJ,EAAa;AACZ,MAAI,IAAJ,EAAgB;AACf,WAAQ,GAAR,CAAY,uCAAZ;;AAEA,UAAO,GAAP,CAAW,MAAX,CAAkB,EAAlB,EAA8B,YAAM;AACnC,aAAS,oBAAQ,EAAR,CAAT;AACA,IAFD;;AAIA,UAAO,GAAP,CAAW,gBAAX,CAA4B,UAAC,MAAD,EAAY;AACvC,QAAI,WAAW,OAAf,EAAwB;AACvB,gBAAW;AAAA,aAAM,QAAQ,IAAR,CAAa,CAAb,CAAN;AAAA,MAAX,EAAkC,CAAlC;AACA;AACD,IAJD;AAKA;AACD,E;;;;;;;AC3GD,8C","file":"0.35478c08d17175b25bff.hot-update.js","sourcesContent":["import express from 'express'\r\nimport babelPolyfill from \"babel-polyfill\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/server\";\r\nimport { RouterContext, match,createMemoryHistory } from \"react-router\";\r\nimport configureStore from \"./store.js\";\r\nimport { Provider } from 'react-redux';\r\nimport routesContainer from \"./routes\";\r\nimport url from \"url\";\r\nlet routes = routesContainer;\r\n\r\n/**\r\n * Create Redux store, and get intitial state.\r\n */\r\nconst server = express()\r\nserver.listen(8000, function () {\r\n  console.log('Server listening on http://localhost:8000, Ctrl+C to stop')\r\n});\r\nvar cassandra = require('cassandra-driver');\r\n\r\nvar client = new cassandra.Client({ contactPoints: ['127.0.0.1']});\r\nvar queries = [];\r\nquries.push('CREATE TABLE user_credentials ( '+\r\n\r\n'email text,'+\r\n'password text,'+\r\n'userid uuid,'+\r\n'PRIMARY KEY (email)')\r\nquries.push('CREATE TABLE user_credentials ( '+\r\n\r\n'email text,'+\r\n'password text,'+\r\n'userid uuid,'+\r\n'PRIMARY KEY (email)')\r\n\r\n\r\nrequire(\"../cassandra/videodb-schema\")(quries, client);\r\n//test\r\nserver.get('/hello', function (req, res) {\r\n  var data = [];\r\n  data.push({\r\n    message: \"Updated message from server: Hello world from  the server\"\r\n  })\r\n  //for effect to see the update of the state\r\n  setTimeout(function () {\r\n    res.send(data);\r\n  }, 3000)\r\n\r\n});\r\n\r\nvar envset = {\r\n  production: process.env.NODE_ENV === 'production'\r\n};\r\nconst hostname = envset.production ? (process.env.HOSTNAME || process['env'].HOSTNAME) : \"localhost\";\r\n\r\nconst store = configureStore();\r\nconst initialState = store.getState();\r\nserver.use(function(req, res, next) {\r\n  match({routes, location: req.url}, (error, redirectLocation, renderProps) => {\r\n    if (redirectLocation) {\r\n      res.redirect(redirectLocation.pathname + redirectLocation.search);\r\n      return;\r\n    }\r\n    if (error || !renderProps) {\r\n      next();\r\n      return;\r\n    }\r\n\tconst reactString = ReactDOM.renderToString(\r\n\t\t<Provider store={store}>\r\n      <RouterContext {...renderProps} />\r\n\t\t</Provider>\r\n\t);\r\n\tconst webserver = __PRODUCTION__ ? \"\" : `//${hostname}:8080`;\r\n\tlet output = (\r\n\t\t`<!doctype html>\r\n\t\t<html lang=\"en-us\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"utf-8\">\r\n\t\t\t\t<title></title>\r\n\t\t\t</head>\r\n\t\t\t<body>\r\n\t\t\t\t<div id=\"react-root\">${reactString}</div>\r\n\t\t\t\t<script>\r\n\t\t\t\t\twindow.__INITIAL_STATE__ = ${JSON.stringify(initialState)}\r\n\t\t\t\t</script>\r\n\t\t\t\t<script src=${webserver}/dist/client.js></script>\r\n\t\t\t</body>\r\n\t\t</html>`\r\n\t\t);\r\n    res.send(output);\r\n  });\r\n});\r\n\r\nif (__DEV__) {\r\n\tif (module.hot) {\r\n\t\tconsole.log(\"[HMR] Waiting for server-side updates\");\r\n\r\n\t\tmodule.hot.accept(\"./routes\", () => {\r\n\t\t\troutes = require(\"./routes\");\r\n\t\t});\r\n\r\n\t\tmodule.hot.addStatusHandler((status) => {\r\n\t\t\tif (status === \"abort\") {\r\n\t\t\t\tsetTimeout(() => process.exit(0), 0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/server.js\n **/","module.exports = require(\"cassandra-driver\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"cassandra-driver\"\n ** module id = 28\n ** module chunks = 0\n **/"],"sourceRoot":""}