{"version":3,"sources":["webpack:///../cassandra/videodb-schema.js?794d"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;AAEA,KAAI,WAAW,uHAAf;AACA,KAAI,SAAS;;AAEX;AACA;AACA,mDACA,aADA,GAEA,gBAFA,GAGA,cAHA,GAIA,uBARW;AASX;AACA;;AAEA,wCACA,cADA,GAEA,oBAFA,GAGA,mBAHA,GAIA,aAJA,GAKA,yBALA,GAMA,yBAlBW;;AAoBX;AACA;AACA;AACA;;AAEA,yCACA,eADA,GAEA,cAFA,GAGA,eAHA,GAIA,sBAJA,GAKA,gBALA,GAMA,oBANA;AAOA;AACA,uCARA,GASA,oBATA,GAUA,uBAVA,GAWA,0BApCW;;AAsCX;AACA;AACA,8CACA,cADA,GAEA,uBAFA,GAGA,eAHA,GAIA,YAJA,GAKA,8BALA,GAMA,2CANA,GAOA,4DA/CW;;AAiDX;AACA;AACA,gDACA,gBADA,GAEA,uBAFA,GAGA,eAHA,GAIA,YAJA,GAKA,8BALA,GAMA,6CANA,GAOA,4DA1DW;;AA4DX;AACA,+CACA,eADA,GAEA,yBAFA,GAGA,uBAHA,GAIA,yBAjEW;;AAmEX;AACA,wDACA,eADA,GAEA,cAFA,GAGA,aAHA,GAIA,iCAxEW;;AA0EX;AACA,gDACA,WADA,GAEA,eAFA,GAGA,uBAHA,GAIA,YAJA,GAKA,8BALA,GAMA,wBANA,GAOA,8BAlFW;;AAoFX;AACA,iDACA,oBADA,GAEA,WAFA,GAGA,mCAxFW;;AA0FX;AACA;AACA,oDACA,eADA,GAEA,qBAFA,GAGA,cAHA,GAIA,eAJA,GAKA,kCALA,GAMA,8CAlGW;;AAoGX;AACA,mDACA,cADA,GAEA,qBAFA,GAGA,eAHA,GAIA,eAJA,GAKA,iCALA,GAMA,8CA3GW;;AA6GX;AACA,8CACA,eADA,GAEA,cAFA,GAGA,gBAHA,GAIA,2BAJA,GAKA,yBALA,GAMA,sDANA,GAOA,8DArHW,CAAb;;AAwHA,KAAI,QAAQ,oBAAQ,EAAR,CAAZ;AACA,QAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB;;AAGhC,OAAM,iBAAiB,SAAjB,cAAiB;AAAA,YACrB,OAAO,OAAP,CAAe,QAAf,EAAyB,UAAS,GAAT,EAAc;AACrC,WAAI,GAAJ,EAAS;AACP,iBAAQ,GAAR,CAAY,GAAZ;AACD,QAFD,MAEO;AACL;AACD;AACF,MAND,CADqB;AAAA,IAAvB;AASA,OAAM,eAAe,SAAf,YAAe;AAAA,YACnB,MAAM,IAAN,CAAW,MAAX,EAAmB,UAAS,KAAT,EAAgB,QAAhB,EAA0B;AAC3C,cAAO,OAAP,CAAe,KAAf,EAAsB,UAAS,GAAT,EAAc;AAClC,aAAI,GAAJ,EAAS;AACP,mBAAQ,GAAR,CAAY,GAAZ;AACD;AACF,QAJD;AAKA;AACD,MAPD,EAOG,UAAS,GAAT,EAAc;AACf,WAAI,GAAJ,EAAS;AACP,iBAAQ,GAAR,CAAY,GAAZ;AACD,QAFD,MAEO;AACL,iBAAQ,GAAR,CAAY,MAAZ;AACD;AACF,MAbD,CADmB;AAAA,IAArB;;AAiBF;AACC,EA9BD,C","file":"0.0951571776963572c729.hot-update.js","sourcesContent":["// //TODO: use async.js to create all the tables\n// //ref: https://github.com/pmcfadin/cassandra-videodb-sample-schema\n\nvar keyspace = \"CREATE KEYSPACE IF NOT EXISTS killrvideo WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\";\nvar tables = [\n\n  // User credentials, keyed by email address so we can authenticate\n  // Seperated from user in case auth is external (Google, Facebook, etc...)\n  'CREATE TABLE IF NOT EXISTS user_credentials (' +\n  'email text,' +\n  'password text,' +\n  'userid uuid,' +\n  'PRIMARY KEY (email));',\n  // Basic entity table for a user\n  // UUID for userid to link to auth system\n\n  'CREATE TABLE IF NOT EXISTS users (' +\n  'userid uuid,' +\n  'firstname varchar,' +\n  'lastname varchar,' +\n  'email text,' +\n  'created_date timestamp,' +\n  'PRIMARY KEY (userid) );',\n\n  // Entity table that will store many videos for a unique user\n  // Meta data - Height, Width, Bit rate, Encoding\n  // Map thumbnails - stop, url\n  // Selected thumbnail\n\n  'CREATE TABLE IF NOT EXISTS videos (' +\n  'videoid uuid,' +\n  'userid uuid,' +\n  'name varchar,' +\n  'description varchar,' +\n  'location text,' +\n  'location_type int,' +\n  // <position in video, url of thumbnail>\n  'preview_thumbnails map<text,text>,  ' +\n  'tags set<varchar>,' +\n  'added_date timestamp,' +\n  'PRIMARY KEY (videoid) );',\n\n  // One-to-many from the user point of view\n  // Also know as a lookup table\n  'CREATE TABLE IF NOT EXISTS user_videos (' +\n  'userid uuid,' +\n  'added_date timestamp,' +\n  'videoid uuid,' +\n  'name text,' +\n  'preview_image_location text,' +\n  'PRIMARY KEY (userid, added_date, videoid)' +\n  ') WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);',\n\n  // Track latest videos, grouped by day (if we ever develop a bad hotspot from the daily grouping here, we could mitigate by\n  // splitting the row using an arbitrary group number, making the partition key (yyyymmdd, group_number))\n  'CREATE TABLE IF NOT EXISTS latest_videos (' +\n  'yyyymmdd text,' +\n  'added_date timestamp,' +\n  'videoid uuid,' +\n  'name text,' +\n  'preview_image_location text,' +\n  'PRIMARY KEY (yyyymmdd, added_date, videoid)' +\n  ') WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);',\n\n  // Counter table\n  'CREATE TABLE IF NOT EXISTS video_rating (' +\n  'videoid uuid,' +\n  'rating_counter counter,' +\n  'rating_total counter,' +\n  'PRIMARY KEY (videoid));',\n\n  // Video ratings by user (to try and mitigate voting multiple times)\n  'CREATE TABLE IF NOT EXISTS video_ratings_by_user (' +\n  'videoid uuid,' +\n  'userid uuid,' +\n  'rating int,' +\n  'PRIMARY KEY (videoid, userid));',\n\n  // Index for tag keywords\n  'CREATE TABLE IF NOT EXISTS videos_by_tag (' +\n  'tag text,' +\n  'videoid uuid,' +\n  'added_date timestamp,' +\n  'name text,' +\n  'preview_image_location text,' +\n  'tagged_date timestamp,' +\n  'PRIMARY KEY (tag, videoid));',\n\n  // Inverted index for tags by first letter in the tag\n  'CREATE TABLE IF NOT EXISTS tags_by_letter (' +\n  'first_letter text,' +\n  'tag text,' +\n  'PRIMARY KEY (first_letter, tag));',\n\n  // Comments as a many-to-many\n  // Looking from the video side to many users\n  'CREATE TABLE IF NOT EXISTS comments_by_video (' +\n  'videoid uuid,' +\n  'commentid timeuuid,' +\n  'userid uuid,' +\n  'comment text,' +\n  'PRIMARY KEY (videoid, commentid)' +\n  ') WITH CLUSTERING ORDER BY (commentid DESC);',\n\n  // looking from the user side to many videos\n  'CREATE TABLE IF NOT EXISTS comments_by_user (' +\n  'userid uuid,' +\n  'commentid timeuuid,' +\n  'videoid uuid,' +\n  'comment text,' +\n  'PRIMARY KEY (userid, commentid)' +\n  ') WITH CLUSTERING ORDER BY (commentid DESC);',\n\n  // Time series wide row with reverse comparator\n  'CREATE TABLE IF NOT EXISTS video_event (' +\n  'videoid uuid,' +\n  'userid uuid,' +\n  'event varchar,' +\n  'event_timestamp timeuuid,' +\n  'video_timestamp bigint,' +\n  'PRIMARY KEY ((videoid,userid),event_timestamp,event)' +\n  ') WITH CLUSTERING ORDER BY (event_timestamp DESC,event ASC);'\n]\n\nvar async = require(\"async\");\nmodule.exports = function(client) {\n\n\n  const createKeyspace = () => (\n    client.execute(keyspace, function(err) {\n      if (err) {\n        console.log(err);\n      } else {\n        createTables();\n      }\n    })\n  )\n  const createTables = () => (\n    async.each(tables, function(table, callback) {\n      client.execute(table, function(err) {\n        if (err) {\n          console.log(err);\n        }\n      });\n      callback();\n    }, function(err) {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log('done');\n      }\n    })\n  )\n\ncreateKeyspace();\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../cassandra/videodb-schema.js\n **/"],"sourceRoot":""}