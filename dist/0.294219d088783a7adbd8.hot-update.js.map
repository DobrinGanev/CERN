{"version":3,"sources":["webpack:///../src/server.js?22b7"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AACA,KAAI,yBAAJ;;AAEA;;;AAGA,KAAM,QAAQ,sBAAd;AACA,KAAM,eAAe,MAAM,QAAN,EAArB;AACA,SAAQ,GAAR,CAAY,YAAZ;;AAEA,KAAM,SAAS,wBAAf;AACA,QAAO,MAAP,CAAc,IAAd,EAAoB,YAAY;AAC9B,WAAQ,GAAR,CAAY,2DAAZ;AACD,EAFD;;AAIA,QAAO,GAAP,CAAW,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC7B,OAAM,gBAAgB,sCAAoB,IAAI,GAAxB,CAAtB;AACA,OAAM,QAAQ,qBAAe,aAAf,CAAd;AACA,OAAM,UAAU,qBAAqB,aAArB,EAAoC,KAApC,CAAhB;AACA,OAAI,+LAQqB,WARrB,uEAU4B,KAAK,SAAL,CAAe,YAAf,CAV5B,iDAYY,SAZZ,0DAAJ;AAgBA,2BAAM,EAAE,gBAAF,EAAW,cAAX,EAAmB,UAAU,IAAI,GAAjC,EAAN,EAA8C,UAAC,KAAD,EAAQ,gBAAR,EAA0B,WAA1B,EAA0C;AACtF,SAAI,KAAJ,EAAW;AACT,WAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,MAAM,OAA3B;AACD,MAFD,MAEO,IAAI,gBAAJ,EAAsB;AAC3B,WAAI,QAAJ,CAAa,GAAb,EAAkB,iBAAiB,QAAjB,GAA4B,iBAAiB,MAA/D;AACD,MAFM,MAEA,IAAI,WAAJ,EAAiB;AACtB,WAAM,UAAU,eACd;AAAA;AAAA,WAAU,OAAO,KAAjB;AACE,mEAAmB,WAAnB;AADF,QADc,CAAhB;AAKA,WAAI,IAAJ,CAAS,eAAe,MAAf,CAAT;AACD;AACF,IAbD;AAcD,EAlCD;;AAoCA,KAAI,IAAJ,EAAa;AACZ,OAAI,IAAJ,EAAgB;AACf,aAAQ,GAAR,CAAY,uCAAZ;;AAEA,YAAO,GAAP,CAAW,MAAX,CAAkB,EAAlB,EAA8B,YAAM;AACnC,gBAAS,oBAAQ,EAAR,CAAT;AACA,MAFD;;AAIA,YAAO,GAAP,CAAW,gBAAX,CAA4B,UAAC,MAAD,EAAY;AACvC,WAAI,WAAW,OAAf,EAAwB;AACvB,oBAAW;AAAA,kBAAM,QAAQ,IAAR,CAAa,CAAb,CAAN;AAAA,UAAX,EAAkC,CAAlC;AACA;AACD,MAJD;AAKA;AACD,E","file":"0.294219d088783a7adbd8.hot-update.js","sourcesContent":["import express from 'express'\r\nimport babelPolyfill from \"babel-polyfill\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/server\";\r\nimport { RouterContext, match,createMemoryHistory } from \"react-router\";\r\nimport configureStore from \"./store.js\";\r\nimport App from './containers/App';\r\nimport { Provider } from 'react-redux';\r\nimport routesContainer from \"./routes\";\r\nimport url from \"url\";\r\nlet routes = routesContainer;\r\n\r\n/**\r\n * Create Redux store, and get intitial state.\r\n */\r\nconst store = configureStore();\r\nconst initialState = store.getState();\r\nconsole.log(initialState)\r\n\r\nconst server = express()\r\nserver.listen(8000, function () {\r\n  console.log('Server listening on http://localhost:8000, Ctrl+C to stop')\r\n})\r\n\r\nserver.use(function (req, res) {\r\n  const memoryHistory = createMemoryHistory(req.url)\r\n  const store = configureStore(memoryHistory)\r\n  const history = syncHistoryWithStore(memoryHistory, store)\r\n  let output = (\r\n\t\t`<!doctype html>\r\n\t\t<html lang=\"en-us\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"utf-8\">\r\n\t\t\t\t<title></title>\r\n\t\t\t</head>\r\n\t\t\t<body>\r\n\t\t\t\t<div id=\"react-root\">${reactString}</div>\r\n\t\t\t\t<script>\r\n\t\t\t\t\twindow.__INITIAL_STATE__ = ${JSON.stringify(initialState)}\r\n\t\t\t\t</script>\r\n\t\t\t\t<script src=${webserver}/dist/client.js></script>\r\n\t\t\t</body>\r\n\t\t</html>`\r\n\t\t);\r\n  match({ history, routes, location: req.url }, (error, redirectLocation, renderProps) => {\r\n    if (error) {\r\n      res.status(500).send(error.message)\r\n    } else if (redirectLocation) {\r\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search)\r\n    } else if (renderProps) {\r\n      const content = renderToString(\r\n        <Provider store={store}>\r\n          <RouterContext {...renderProps}/>\r\n        </Provider>\r\n      )\r\n      res.send(renderToString(output))\r\n    }\r\n  })\r\n})\r\n\r\nif (__DEV__) {\r\n\tif (module.hot) {\r\n\t\tconsole.log(\"[HMR] Waiting for server-side updates\");\r\n\r\n\t\tmodule.hot.accept(\"./routes\", () => {\r\n\t\t\troutes = require(\"./routes\");\r\n\t\t});\r\n\r\n\t\tmodule.hot.addStatusHandler((status) => {\r\n\t\t\tif (status === \"abort\") {\r\n\t\t\t\tsetTimeout(() => process.exit(0), 0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ../src/server.js\n **/"],"sourceRoot":""}