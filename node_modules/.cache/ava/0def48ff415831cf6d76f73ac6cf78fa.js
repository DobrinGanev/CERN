import _Promise from '/home/dobrin/CERN/node_modules/babel-runtime/core-js/promise.js';
import _JSON$stringify from '/home/dobrin/CERN/node_modules/babel-runtime/core-js/json/stringify.js';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

import test from 'ava';
import nock from 'nock';
import fetch from 'isomorphic-fetch';
import http from "http";

const API_URL = "http://mytest.com";

export default function callApi(endpoint, method = 'get', body) {
  return fetch(`${ API_URL }/${ endpoint }`, {
    headers: { 'content-type': 'application/json' },
    method,
    body: _JSON$stringify(body)
  }).then(response => response.json().then(json => ({ json, response }))).then(({ json, response }) => {
    if (!response.ok) {
      return _Promise.reject(json);
    }
    return json;
  }).then(response => response, error => error);
}

test('method defaults to GET', t => {
  var reply = {
    message: "hello world"
  };
  nock(API_URL).get("/test").reply(200, reply);
  return callApi('test').then(response => {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    t.deepEqual(_rec._expr(_rec._capt(response, 'arguments/0'), {
      content: 't.deepEqual(response, reply)',
      filepath: 'src/util/__tests__/apiCaller.spec.js',
      line: 36,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"response","range":[12,20]},{"type":"Identifier","name":"reply","range":[22,27]}],"range":[0,28]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"response","range":[12,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"reply","range":[22,27]},{"type":{"label":")"},"range":[27,28]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), _rec2._expr(_rec2._capt(reply, 'arguments/1'), {
      content: 't.deepEqual(response, reply)',
      filepath: 'src/util/__tests__/apiCaller.spec.js',
      line: 36,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"response","range":[12,20]},{"type":"Identifier","name":"reply","range":[22,27]}],"range":[0,28]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"response","range":[12,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"reply","range":[22,27]},{"type":{"label":")"},"range":[27,28]}]',
      visitorKeys: _powerAssertVisitorKeys
    }));
  });
});

test('sends the body', t => {
  const body = { id: 5 };
  const reply = { foo: 'bar' };
  nock(API_URL).post('/foo', body).reply(200, reply);
  return callApi('foo', 'post', body).then(response => {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    t.deepEqual(_rec3._expr(_rec3._capt(response, 'arguments/0'), {
      content: 't.deepEqual(response, reply)',
      filepath: 'src/util/__tests__/apiCaller.spec.js',
      line: 47,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"response","range":[12,20]},{"type":"Identifier","name":"reply","range":[22,27]}],"range":[0,28]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"response","range":[12,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"reply","range":[22,27]},{"type":{"label":")"},"range":[27,28]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), _rec4._expr(_rec4._capt(reply, 'arguments/1'), {
      content: 't.deepEqual(response, reply)',
      filepath: 'src/util/__tests__/apiCaller.spec.js',
      line: 47,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"response","range":[12,20]},{"type":"Identifier","name":"reply","range":[22,27]}],"range":[0,28]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"response","range":[12,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"reply","range":[22,27]},{"type":{"label":")"},"range":[27,28]}]',
      visitorKeys: _powerAssertVisitorKeys
    }));
  });
});

test('returns the error', t => {
  const reply = { message: 'Errrrrrrrrr' };
  nock(API_URL).get('/send_error').reply(500, reply);
  return callApi('send_error').then(error => {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    t.deepEqual(_rec5._expr(_rec5._capt(error, 'arguments/0'), {
      content: 't.deepEqual(error, reply)',
      filepath: 'src/util/__tests__/apiCaller.spec.js',
      line: 57,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"error","range":[12,17]},{"type":"Identifier","name":"reply","range":[19,24]}],"range":[0,25]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"error","range":[12,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"name"},"value":"reply","range":[19,24]},{"type":{"label":")"},"range":[24,25]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), _rec6._expr(_rec6._capt(reply, 'arguments/1'), {
      content: 't.deepEqual(error, reply)',
      filepath: 'src/util/__tests__/apiCaller.spec.js',
      line: 57,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"Identifier","name":"error","range":[12,17]},{"type":"Identifier","name":"reply","range":[19,24]}],"range":[0,25]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"error","range":[12,17]},{"type":{"label":","},"range":[17,18]},{"type":{"label":"name"},"value":"reply","range":[19,24]},{"type":{"label":")"},"range":[24,25]}]',
      visitorKeys: _powerAssertVisitorKeys
    }));
  });
});
//# sourceMappingURL=../../../node_modules/.cache/ava/0def48ff415831cf6d76f73ac6cf78fa.js.map