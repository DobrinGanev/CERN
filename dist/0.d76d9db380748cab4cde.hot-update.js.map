{"version":3,"sources":["webpack:///../cassandra/videodb-schema.js?794d"],"names":[],"mappingsoBAAQ,EAAR,CAAZ;AACA,QAAO,OAAP,CAAe,OAAf,GAAyB,UAAS,OAAT,EAAkB,MAAlB,EAA0B;;AAEjD,SAAM,IAAN,CAAW,OAAX,EAAoB,UAAS,KAAT,EAAgB,QAAhB,EAA0B;AAC5C,aAAQ,GAAR,CAAY,KAAZ;AACA,YAAO,OAAP,CAAe,KAAf,EAAsB,UAAS,GAAT,EAAc;AACnC,WAAI,GAAJ,EAAS;AACP,iBAAQ,GAAR,CAAY,GAAZ;AACD;AACA;AACF,MALA;AAMD,IARD,EAQG,UAAS,GAAT,EAAc;AACb,SAAI,GAAJ,EAAU;AACR,eAAQ,GAAR,CAAY,GAAZ;AACD,MAFD,MAEO;AACL,eAAQ,GAAR,CAAY,eAAZ;AACD;AACJ,IAdD;AAeD,EAjBD,C","file":"0.d76d9db380748cab4cde.hot-update.js","sourcesContent":["// //TODO: use async.js to create all the tables\n// //ref: https://github.com/pmcfadin/cassandra-videodb-sample-schema\n//\n// DROP KEYSPACE IF EXISTS killrvideo;\n// CREATE KEYSPACE killrvideo WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\n//\n// use killrvideo;\n//\n// // User credentials, keyed by email address so we can authenticate\n// // Seperated from user in case auth is external (Google, Facebook, etc...)\n// CREATE TABLE user_credentials (\n//    email text,\n//    password text,\n//    userid uuid,\n//    PRIMARY KEY (email)\n// );\n//\n// // Basic entity table for a user\n// // UUID for userid to link to auth system\n// CREATE TABLE users (\n//    userid uuid,\n//    firstname varchar,\n//    lastname varchar,\n//    email text,\n//    created_date timestamp,\n//    PRIMARY KEY (userid)\n// );\n//\n// // Entity table that will store many videos for a unique user\n// // Meta data - Height, Width, Bit rate, Encoding\n// // Map thumbnails - stop, url\n// // Selected thumbnail\n// CREATE TABLE videos (\n//    videoid uuid,\n//    userid uuid,\n//    name varchar,\n//    description varchar,\n//    location text,\n//    location_type int,\n//    preview_thumbnails map<text,text>,  // <position in video, url of thumbnail>\n//    tags set<varchar>,\n//    added_date timestamp,\n//    PRIMARY KEY (videoid)\n// );\n//\n// // One-to-many from the user point of view\n// // Also know as a lookup table\n// CREATE TABLE user_videos (\n//    userid uuid,\n//    added_date timestamp,\n//    videoid uuid,\n//    name text,\n//    preview_image_location text,\n//    PRIMARY KEY (userid, added_date, videoid)\n// ) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n//\n// // Track latest videos, grouped by day (if we ever develop a bad hotspot from the daily grouping here, we could mitigate by\n// // splitting the row using an arbitrary group number, making the partition key (yyyymmdd, group_number))\n// CREATE TABLE latest_videos (\n//    yyyymmdd text,\n//    added_date timestamp,\n//    videoid uuid,\n//    name text,\n//    preview_image_location text,\n//    PRIMARY KEY (yyyymmdd, added_date, videoid)\n// ) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n//\n// // Counter table\n// CREATE TABLE video_rating (\n//    videoid uuid,\n//    rating_counter counter,\n//    rating_total counter,\n//    PRIMARY KEY (videoid)\n// );\n//\n// // Video ratings by user (to try and mitigate voting multiple times)\n// CREATE TABLE video_ratings_by_user (\n//    videoid uuid,\n//    userid uuid,\n//    rating int,\n//    PRIMARY KEY (videoid, userid)\n// );\n//\n// // Index for tag keywords\n// CREATE TABLE videos_by_tag (\n//    tag text,\n//    videoid uuid,\n//    added_date timestamp,\n//    name text,\n//    preview_image_location text,\n//    tagged_date timestamp,\n//    PRIMARY KEY (tag, videoid)\n// );\n//\n// // Inverted index for tags by first letter in the tag\n// CREATE TABLE tags_by_letter (\n//    first_letter text,\n//    tag text,\n//    PRIMARY KEY (first_letter, tag)\n// );\n//\n// // Comments as a many-to-many\n// // Looking from the video side to many users\n// CREATE TABLE comments_by_video (\n//    videoid uuid,\n//    commentid timeuuid,\n//    userid uuid,\n//    comment text,\n//    PRIMARY KEY (videoid, commentid)\n// ) WITH CLUSTERING ORDER BY (commentid DESC);\n//\n// // looking from the user side to many videos\n// CREATE TABLE comments_by_user (\n//    userid uuid,\n//    commentid timeuuid,\n//    videoid uuid,\n//    comment text,\n//    PRIMARY KEY (userid, commentid)\n// ) WITH CLUSTERING ORDER BY (commentid DESC);\n//\n//\n// // Time series wide row with reverse comparator\n// CREATE TABLE video_event (\n//    videoid uuid,\n//    userid uuid,\n//    event varchar,\n//    event_timestamp timeuuid,\n//    video_timestamp bigint,\n//    PRIMARY KEY ((videoid,userid),event_timestamp,event)\n// ) WITH CLUSTERING ORDER BY (event_timestamp DESC,event ASC);\n\n\nvar async = require(\"async\");\nmodule.exports.videoDB = function(queries, client) {\n\n  async.each(queries, function(query, callback) {\n    console.log(query);\n    client.execute(query, function(err) {\n     if (err) {\n       console.log(err);\n     }\n      callback();\n   });\n  }, function(err) {\n      if( err ) {\n        console.log(err);\n      } else {\n        console.log('rock and roll');\n      }\n  });\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ../cassandra/videodb-schema.js\n **/"],"sourceRoot":""}